!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d yasserh/wine-quality-dataset

!unzip wine-quality-dataset.zip

**WINE QUALITY PREDICTION**

data = pd.read_csv('/content/WineQT.csv')

import warnings
warnings.filterwarnings('always')
warnings.filterwarnings('ignore')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns


%matplotlib inline
style.use('fivethirtyeight')
sns.set(style='whitegrid',color_codes=True)

from sklearn.linear_model import LogisticRegression
from sklearn.svm import LinearSVC,SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB

from sklearn.linear_model import LinearRegression,Ridge,Lasso,RidgeCV
from sklearn.ensemble import RandomForestRegressor,BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor

from sklearn.model_selection import train_test_split,cross_validate
from sklearn.model_selection import KFold
from sklearn.model_selection import GridSearchCV

from sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix


data.head()


data.info()

data.describe().T

data['quality'].unique()

data.duplicated().sum()

data=data.drop_duplicates()

for i in data.columns:
    q1 = data[i].quantile(0.25)
    q3 = data[i].quantile(0.75)
    iqr = q3 - q1
    upper = q3 + 1.5 * iqr
    lower = q1 - 1.5 * iqr

    outliers = (data[i] < lower) | (data[i] > upper)

    data = data[~outliers]

X=data.drop('quality',axis=1)
y=data['quality']

y=y.apply(lambda y_value : 1 if y_value>=7 else 0)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

model1 = LogisticRegression()

model1.fit(X_train, y_train)

pred = model1.predict(X_test)

accuracy = accuracy_score(y_test, pred)

class_report = classification_report(y_test, pred)

conf_matrix = confusion_matrix(y_test, pred)

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", cbar=False,
            xticklabels=model1.classes_, yticklabels=model1.classes_)
plt.xlabel("Predicted")
plt.ylabel("True")
plt.title("Confusion Matrix")
plt.show()

print("Accuracy:", accuracy)
print("Classification Report:\n", class_report)
